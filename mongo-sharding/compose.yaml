services:
  #сервер конфигурации
  configSrv1:
    image: mongo:latest # docker образ
    container_name: configSrv1 
    restart: always
    ports:
      - "27017:27017"
    # networks:
    #   app-network:
    #     ipv4_address: 173.17.0.10
    # volumes:
    #   - config-data:/data/db
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server1",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард 
  shard11:
    image: mongo:latest
    container_name: shard11
    restart: always
    ports:
      - "27018:27017"
    # networks:
    #   app-network:
    #     ipv4_address: 173.17.0.9
    # volumes:
    #   - shard1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard11", #название реплики
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
    depends_on:
      - configSrv1

  #2-й шард 
  shard12:
    image: mongo:latest
    container_name: shard12
    restart: always
    ports:
      - "27019:27017"
    # networks:
    #   app-network:
    #     ipv4_address: 173.17.0.8
    # volumes:
    #   - shard2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard12", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
    depends_on:
      - configSrv1

  #роутер
  mongos_router1:
    image: mongo:latest
    container_name: mongos_router1
    restart: always
    ports:
      - "27020:27017"
    # networks:
    #   app-network:
    #     ipv4_address: 173.17.0.7
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server1/configSrv1:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
    depends_on:
      - shard11
      - shard12

# networks:
#   app-network:
#     driver: bridge
#     ipam:
#       driver: default
#       config:
#         - subnet: 173.17.0.0/16

  pymongo_api1:
    container_name: pymongo_api1
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router1"
      MONGODB_DATABASE_NAME: "somedb"
    depends_on:
      - mongos_router1


# volumes:
#   mongodb1_data_container: